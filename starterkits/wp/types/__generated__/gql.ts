/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  \n  query GetPage($id: ID!, $idType: PageIdType!, $asPreview: Boolean!) {\n    page(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          nicename\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n": types.GetPageDocument,
    "\n    fragment CustomBlockLibraryPostSelectorFragment on CustomBlockLibraryPostSelector {\n      post {\n        title\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n    }\n  ": types.CustomBlockLibraryPostSelectorFragmentFragmentDoc,
    "\n  \n  fragment WpBlocksFragment on EditorBlock {\n    __typename\n    clientId\n    name\n    renderedHtml\n    parentClientId\n\n    ... on CoreParagraph {\n      attributes {\n        cssClassName\n        backgroundColor\n        content\n        style\n        textColor\n        fontSize\n        fontFamily\n        direction\n        dropCap\n        gradient\n        align\n      }\n    }\n    ... on CoreColumns {\n      attributes {\n        align\n        anchor\n        layout\n        cssClassName\n        isStackedOnMobile\n        verticalAlignment\n        borderColor\n        backgroundColor\n        fontSize\n        fontFamily\n        style\n        textColor\n        gradient\n      }\n    }\n    ... on CoreColumn {\n      attributes {\n        anchor\n        borderColor\n        backgroundColor\n        cssClassName\n        fontSize\n        fontFamily\n        gradient\n        layout\n        style\n        textColor\n        verticalAlignment\n        width\n      }\n    }\n    ... on CoreCode {\n      attributes {\n        anchor\n        backgroundColor\n        borderColor\n        className\n        content\n        cssClassName\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n      }\n    }\n    ... on CoreQuote {\n      attributes {\n        textAlign\n        anchor\n        backgroundColor\n        textAlign\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n        value\n        cssClassName\n      }\n    }\n    ... on CoreImage {\n      attributes {\n        align\n        alt\n        anchor\n        borderColor\n        \n        className\n        width\n        url\n        title\n        style\n        src\n        sizeSlug\n        rel\n        lock\n        linkTarget\n        linkDestination\n        linkClass\n        href\n        height\n        cssClassName\n      }\n    }\n    ... on CoreSeparator {\n      attributes {\n        align\n        anchor\n        opacity\n        gradient\n        backgroundColor\n        style\n        cssClassName\n      }\n    }\n    ... on CoreList {\n      attributes {\n        anchor\n        backgroundColor\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        ordered\n        reversed\n        start\n        style\n        textColor\n        type\n        values\n        cssClassName\n      }\n    }\n    ... on CoreButton {\n      attributes {\n        anchor\n        gradient\n        textAlign\n        textAlign\n        textColor\n        style\n        fontSize\n        fontFamily\n        linkTarget\n        rel\n        url\n        backgroundColor\n        cssClassName\n        linkClassName\n      }\n    }\n    ... on CoreButtons {\n      attributes {\n        cssClassName\n        align\n        anchor\n        fontFamily\n        fontSize\n        layout\n        style\n      }\n    }\n    ... on CoreHeading {\n      attributes {\n        align\n        anchor\n        backgroundColor\n        \n        fontFamily\n        fontSize\n        gradient\n        level\n        style\n        textAlign\n        textColor\n        cssClassName\n      }\n    }\n  }\n": types.WpBlocksFragmentFragmentDoc,
    "\n  \n  query GetPost($id: ID!, $idType: PostIdType!, $asPreview: Boolean!) {\n    post(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          name\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n": types.GetPostDocument,
    "\n  query BlogArchive($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        cursor\n        node {\n          slug\n          uri\n          title\n          id\n          featuredImage {\n            node {\n              altText\n              uri\n              sourceUrl\n              srcSet(size: MEDIUM)\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n        hasPreviousPage\n      }\n    }\n  }\n": types.BlogArchiveDocument,
    "\n  query HomeMetadata {\n    generalSettings {\n      title\n      description\n    }\n  }\n": types.HomeMetadataDocument,
    "\n      query GetLayout {\n        primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n          nodes {\n            id\n            label\n            uri\n          }\n        }\n      }\n    ": types.GetLayoutDocument,
    "\n  query LayoutMetadata {\n    generalSettings {\n      title\n    }\n  }\n": types.LayoutMetadataDocument,
    "\n  query GetReadingSettings {\n    readingSettings {\n      pageOnFront\n      showOnFront\n    }\n    generalSettings {\n      title\n    }\n  }\n": types.GetReadingSettingsDocument,
    "\n  query Search(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $search: String\n  ) {\n    contentNodes(\n      first: $first\n      last: $last\n      after: $after\n      before: $before\n      where: {\n        contentTypes: [FILM, PAGE, POST]\n        search: $search\n        status: PUBLISH\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          ... on NodeWithExcerpt {\n            excerpt\n          }\n          ... on Page {\n            slug\n          }\n          ... on Post {\n            slug\n          }\n        }\n      }\n    }\n  }\n": types.SearchDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query GetPage($id: ID!, $idType: PageIdType!, $asPreview: Boolean!) {\n    page(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          nicename\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n"): (typeof documents)["\n  \n  query GetPage($id: ID!, $idType: PageIdType!, $asPreview: Boolean!) {\n    page(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          nicename\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment CustomBlockLibraryPostSelectorFragment on CustomBlockLibraryPostSelector {\n      post {\n        title\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment CustomBlockLibraryPostSelectorFragment on CustomBlockLibraryPostSelector {\n      post {\n        title\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  fragment WpBlocksFragment on EditorBlock {\n    __typename\n    clientId\n    name\n    renderedHtml\n    parentClientId\n\n    ... on CoreParagraph {\n      attributes {\n        cssClassName\n        backgroundColor\n        content\n        style\n        textColor\n        fontSize\n        fontFamily\n        direction\n        dropCap\n        gradient\n        align\n      }\n    }\n    ... on CoreColumns {\n      attributes {\n        align\n        anchor\n        layout\n        cssClassName\n        isStackedOnMobile\n        verticalAlignment\n        borderColor\n        backgroundColor\n        fontSize\n        fontFamily\n        style\n        textColor\n        gradient\n      }\n    }\n    ... on CoreColumn {\n      attributes {\n        anchor\n        borderColor\n        backgroundColor\n        cssClassName\n        fontSize\n        fontFamily\n        gradient\n        layout\n        style\n        textColor\n        verticalAlignment\n        width\n      }\n    }\n    ... on CoreCode {\n      attributes {\n        anchor\n        backgroundColor\n        borderColor\n        className\n        content\n        cssClassName\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n      }\n    }\n    ... on CoreQuote {\n      attributes {\n        textAlign\n        anchor\n        backgroundColor\n        textAlign\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n        value\n        cssClassName\n      }\n    }\n    ... on CoreImage {\n      attributes {\n        align\n        alt\n        anchor\n        borderColor\n        \n        className\n        width\n        url\n        title\n        style\n        src\n        sizeSlug\n        rel\n        lock\n        linkTarget\n        linkDestination\n        linkClass\n        href\n        height\n        cssClassName\n      }\n    }\n    ... on CoreSeparator {\n      attributes {\n        align\n        anchor\n        opacity\n        gradient\n        backgroundColor\n        style\n        cssClassName\n      }\n    }\n    ... on CoreList {\n      attributes {\n        anchor\n        backgroundColor\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        ordered\n        reversed\n        start\n        style\n        textColor\n        type\n        values\n        cssClassName\n      }\n    }\n    ... on CoreButton {\n      attributes {\n        anchor\n        gradient\n        textAlign\n        textAlign\n        textColor\n        style\n        fontSize\n        fontFamily\n        linkTarget\n        rel\n        url\n        backgroundColor\n        cssClassName\n        linkClassName\n      }\n    }\n    ... on CoreButtons {\n      attributes {\n        cssClassName\n        align\n        anchor\n        fontFamily\n        fontSize\n        layout\n        style\n      }\n    }\n    ... on CoreHeading {\n      attributes {\n        align\n        anchor\n        backgroundColor\n        \n        fontFamily\n        fontSize\n        gradient\n        level\n        style\n        textAlign\n        textColor\n        cssClassName\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  fragment WpBlocksFragment on EditorBlock {\n    __typename\n    clientId\n    name\n    renderedHtml\n    parentClientId\n\n    ... on CoreParagraph {\n      attributes {\n        cssClassName\n        backgroundColor\n        content\n        style\n        textColor\n        fontSize\n        fontFamily\n        direction\n        dropCap\n        gradient\n        align\n      }\n    }\n    ... on CoreColumns {\n      attributes {\n        align\n        anchor\n        layout\n        cssClassName\n        isStackedOnMobile\n        verticalAlignment\n        borderColor\n        backgroundColor\n        fontSize\n        fontFamily\n        style\n        textColor\n        gradient\n      }\n    }\n    ... on CoreColumn {\n      attributes {\n        anchor\n        borderColor\n        backgroundColor\n        cssClassName\n        fontSize\n        fontFamily\n        gradient\n        layout\n        style\n        textColor\n        verticalAlignment\n        width\n      }\n    }\n    ... on CoreCode {\n      attributes {\n        anchor\n        backgroundColor\n        borderColor\n        className\n        content\n        cssClassName\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n      }\n    }\n    ... on CoreQuote {\n      attributes {\n        textAlign\n        anchor\n        backgroundColor\n        textAlign\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        style\n        textColor\n        value\n        cssClassName\n      }\n    }\n    ... on CoreImage {\n      attributes {\n        align\n        alt\n        anchor\n        borderColor\n        \n        className\n        width\n        url\n        title\n        style\n        src\n        sizeSlug\n        rel\n        lock\n        linkTarget\n        linkDestination\n        linkClass\n        href\n        height\n        cssClassName\n      }\n    }\n    ... on CoreSeparator {\n      attributes {\n        align\n        anchor\n        opacity\n        gradient\n        backgroundColor\n        style\n        cssClassName\n      }\n    }\n    ... on CoreList {\n      attributes {\n        anchor\n        backgroundColor\n        className\n        fontFamily\n        fontSize\n        gradient\n        lock\n        ordered\n        reversed\n        start\n        style\n        textColor\n        type\n        values\n        cssClassName\n      }\n    }\n    ... on CoreButton {\n      attributes {\n        anchor\n        gradient\n        textAlign\n        textAlign\n        textColor\n        style\n        fontSize\n        fontFamily\n        linkTarget\n        rel\n        url\n        backgroundColor\n        cssClassName\n        linkClassName\n      }\n    }\n    ... on CoreButtons {\n      attributes {\n        cssClassName\n        align\n        anchor\n        fontFamily\n        fontSize\n        layout\n        style\n      }\n    }\n    ... on CoreHeading {\n      attributes {\n        align\n        anchor\n        backgroundColor\n        \n        fontFamily\n        fontSize\n        gradient\n        level\n        style\n        textAlign\n        textColor\n        cssClassName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query GetPost($id: ID!, $idType: PostIdType!, $asPreview: Boolean!) {\n    post(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          name\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n"): (typeof documents)["\n  \n  query GetPost($id: ID!, $idType: PostIdType!, $asPreview: Boolean!) {\n    post(id: $id, idType: $idType, asPreview: $asPreview) {\n      __typename\n      title\n      editorBlocks(flat: true) {\n        ...WpBlocksFragment\n      }\n      author {\n        node {\n          name\n        }\n      }\n      date\n      status\n      isRestricted\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BlogArchive($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        cursor\n        node {\n          slug\n          uri\n          title\n          id\n          featuredImage {\n            node {\n              altText\n              uri\n              sourceUrl\n              srcSet(size: MEDIUM)\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query BlogArchive($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        cursor\n        node {\n          slug\n          uri\n          title\n          id\n          featuredImage {\n            node {\n              altText\n              uri\n              sourceUrl\n              srcSet(size: MEDIUM)\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n        hasPreviousPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HomeMetadata {\n    generalSettings {\n      title\n      description\n    }\n  }\n"): (typeof documents)["\n  query HomeMetadata {\n    generalSettings {\n      title\n      description\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetLayout {\n        primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n          nodes {\n            id\n            label\n            uri\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GetLayout {\n        primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n          nodes {\n            id\n            label\n            uri\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LayoutMetadata {\n    generalSettings {\n      title\n    }\n  }\n"): (typeof documents)["\n  query LayoutMetadata {\n    generalSettings {\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingSettings {\n    readingSettings {\n      pageOnFront\n      showOnFront\n    }\n    generalSettings {\n      title\n    }\n  }\n"): (typeof documents)["\n  query GetReadingSettings {\n    readingSettings {\n      pageOnFront\n      showOnFront\n    }\n    generalSettings {\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Search(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $search: String\n  ) {\n    contentNodes(\n      first: $first\n      last: $last\n      after: $after\n      before: $before\n      where: {\n        contentTypes: [FILM, PAGE, POST]\n        search: $search\n        status: PUBLISH\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          ... on NodeWithExcerpt {\n            excerpt\n          }\n          ... on Page {\n            slug\n          }\n          ... on Post {\n            slug\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Search(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $search: String\n  ) {\n    contentNodes(\n      first: $first\n      last: $last\n      after: $after\n      before: $before\n      where: {\n        contentTypes: [FILM, PAGE, POST]\n        search: $search\n        status: PUBLISH\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          ... on NodeWithExcerpt {\n            excerpt\n          }\n          ... on Page {\n            slug\n          }\n          ... on Post {\n            slug\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;